import * as jwt from 'jsonwebtoken'
import { KeyStore } from './Keystore';
import { injectable, inject } from 'inversify';
import { TYPES } from '../types';
import { container } from '../inversify.config';

@injectable()
export class JWTHandler implements TokenHandler {
    private privateKey: string | Buffer;
    private publicKey: string | Buffer;

    constructor(@inject(TYPES.KeyStore) private keyStore: KeyStore) {
        // this.privateKey = keyStore.getPrivateKey()
        this.publicKey = keyStore.getPublicKey()
    }

    /**
     * Function to generate a new Token
     * @param payload The payload to put in the Token
     * @param options Options for signing the Token
     */
    public generate(payload: any): string {
        
        throw new Error("Method not implemented");
        // let signOptions: jwt.SignOptions = {
        //     issuer:  'catapultprime',
        //     expiresIn:  "12h",
        //     algorithm:  "RS256"
        // };

        // return jwt.sign(payload, this.privateKey, signOptions);
    }

    /**
     * Function to validate a Token generated by the genrate method of this class
     */
    public validate(token: string): any {
        // console.log({token})

        let verificationOptions: jwt.VerifyOptions = {
            issuer: 'catapultprime',
            // ignoreExpiration: true,
            algorithms:  ["RS256"]
        }

        // console.log(this.publicKey)

        return jwt.verify(token, this.publicKey, verificationOptions);
    }
}

export interface TokenHandler {
    generate(payload: any): string
    validate(token: string): any
}

// export default container.get(TYPES.TokenHandler)